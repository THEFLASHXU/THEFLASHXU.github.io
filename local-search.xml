<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring基于XML的依赖注入DI知识概述</title>
    <link href="/2022/04/10/Spring%E5%9F%BA%E4%BA%8EXML%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5DI%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/04/10/Spring%E5%9F%BA%E4%BA%8EXML%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5DI%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="基于XML的DI"><a href="#基于XML的DI" class="headerlink" title="基于XML的DI"></a>基于XML的DI</h1><p>bean 实例在调用无参构造器创建对象后，就要对 bean 对象的属性进行初始化。初始化是由容器自动完成的，称为注入。根据注入方式的不同，常用的有两类：<strong>set 注入、构造注入</strong>。</p><h2 id="一、set注入"><a href="#一、set注入" class="headerlink" title="一、set注入"></a>一、set注入</h2><p>set 注入也叫<strong>设值注入</strong>,通过 setter 方法传入被调用者的实例。</p><h3 id="1-1-简单类型"><a href="#1-1-简单类型" class="headerlink" title="1.1.简单类型"></a>1.1.简单类型</h3><p>简单类型：spring中规定java的基本数据类型和String都是简单类型</p><p>声明student对象：</p><figure class="highlight typescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">xu</span>.<span class="hljs-property">ba01</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> int age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">int age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>XML配置：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;bean id<span class="hljs-operator">=</span><span class="hljs-string">&quot;myStudent&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.xu.ba01.Student&quot;</span>&gt;<br>    &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;name&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;李四&quot;</span>/&gt;<br>    &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;age&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;20&quot;</span>/&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.xu;<br><br><span class="hljs-keyword">import</span> com.xu.ba01.Student;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">mytest</span> &#123;<br><br>    @<span class="hljs-function">Test</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-type">String</span> config=<span class="hljs-string">&quot;ba01/applicationContext.xml&quot;</span>;<br>        ApplicationContext ac=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ClassPathXmlApplicationContext</span>(config);<br>        Student student = (Student) ac.<span class="hljs-built_in">getBean</span>(<span class="hljs-string">&quot;myStudent&quot;</span>);<br>        System.out.<span class="hljs-built_in">println</span>(student);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>系统先找到相应的XML文件，打开XML文件后，系统按bean的id寻找使用的对象设值信息，寻找到相应的bean之后，系统找到property内中的name值，根据name值去找set方法，XML中的name值和对象set方法之间的匹配逻辑为name值要和set方法函数名去掉set后的单词首字母变小写后的单词相同，以上面的代码为例，XML中id为myStudent的对象有两个简单类型的属性赋值，分别是name和age，系统检测到name属性为name后，会在Student对象中搜寻名为setName的方法，并调用此set方法完成属性的赋值。</p><h3 id="1-2引用类型"><a href="#1-2引用类型" class="headerlink" title="1.2引用类型"></a>1.2引用类型</h3><p>有很多时候，类中的成员变量会是一个引用类型。用人话讲就是这个类的某个成员变量不再单单是简单类型了，而是其他类定义的。比如下面代码示例中的student类，其成员变量school是school类型的，而school本身是一个类。<br>Student类和School类的定义如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//School类的声明</span><br>package com.<span class="hljs-property">xu</span>.<span class="hljs-property">ba02</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> address;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAddress</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> address</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span> = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;School&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//Student类的声明</span><br>package com.<span class="hljs-property">xu</span>.<span class="hljs-property">ba02</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> int age;<br>    <span class="hljs-comment">//声明一个引用类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">School</span> school;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">int age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setSchool</span>(<span class="hljs-params">School school</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;setSchool:&quot;</span>+school);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">school</span> = school;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, school=&quot;</span> + school +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当指定 bean 的某属性值为另一 bean 的实例时，通过 <strong>ref</strong> 指定它们间的引用关系。<strong>ref的值必须为某 bean 的 id 值</strong>。<br>其实逻辑很简单，既然有引用类型，那就不能直接用set赋值引用类型，应该先把引用类型这个对象单独声明，再通过某种方式把声明的引用类型引入进来。</p><p>XML代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">(2)引用类型的set注入：spring调用类的set方法</span><br><span class="hljs-comment">&lt;bean id=&quot;xxx&quot; class=&quot;xxx&quot;&gt;</span><br><span class="hljs-comment">    &lt;property name=&quot;属性名称&quot; ref=&quot;bean的id（对象的名称）&quot;</span><br><span class="hljs-comment">&lt;/bean&gt;</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myStudent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xu.ba02.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;李四&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引用类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;school&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mySchool&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--    声明school对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mySchool&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xu.ba02.School&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;黑大&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;学府路&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.xu;<br><span class="hljs-keyword">import</span> com.xu.ba02.Student;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">mytest02</span> &#123;<br>    @<span class="hljs-function">Test</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-type">String</span> config=<span class="hljs-string">&quot;ba02/applicationContext.xml&quot;</span>;<br>        ApplicationContext ac=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ClassPathXmlApplicationContext</span>(config);<br>        Student student = (Student) ac.<span class="hljs-built_in">getBean</span>(<span class="hljs-string">&quot;myStudent&quot;</span>);<br>        System.out.<span class="hljs-built_in">println</span>(student);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、构造注入"><a href="#二、构造注入" class="headerlink" title="二、构造注入"></a>二、构造注入</h2><p><strong>构造注入</strong>是指，在构造调用者实例的同时，完成被调用者的实例化。即，使用构造器设置依赖关系。用人话讲就是在bean标签中调用这个类的构造方法对对象进行初始化。<br>代码示例：<br>Student类：增加了有参数的构造方法，用来初始化成员变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">xu</span>.<span class="hljs-property">ba03</span>;<br><br><span class="hljs-keyword">import</span> javax.<span class="hljs-property">xml</span>.<span class="hljs-property">transform</span>.<span class="hljs-property">Source</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> int age;<br>    <span class="hljs-comment">//声明一个引用类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">School</span> school;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">int age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setSchool</span>(<span class="hljs-params">School school</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">school</span> = school;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Student</span>()&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;spring调用无参数构造方法创建对象。&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建有参数构造方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">myname</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">myage</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">myschool</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-title class_">Student</span>(<span class="hljs-title class_">String</span> myname,int myage,<span class="hljs-title class_">School</span> myschool)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;=========student有参数构造方法==========&quot;</span>);<br>        <span class="hljs-comment">//属性赋值</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=myname;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=myage;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">school</span>=myschool;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, school=&quot;</span> + school +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>School类和上一部分相同，这里省略不写。<br>重点是XML中的语法，实现了利用构造函数初始化成员变量。<br>XML代码内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">    2.构造注入：spring调用类有参数构造方法，在创建对象的同时，在构造方法中给属性赋值。<br>    构造注入使用<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span>标签<br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span>标签：一个<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span>表示构造方法一个参数<br>    <span class="hljs-tag">&lt;<span class="hljs-name">constractor-arg</span>&gt;</span>标签属性：<br>        name：表示构造方法的形参名<br>        index：表示构造方法参数的位置，参数从左往右位置是0,1,2的顺序,不过，该属性不要也行，但要注意，若参数类型相同，或之间有包含关系，则需要保证赋值顺序要与构造器中的参数顺序一致。<br>        value:构造方法的形参类型是简答类型的，使用value<br>        ref：构造方法的形参类型是引用类型的，使用ref<br>--&gt;<br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myStudent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xu.ba03.Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myname&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;李磊&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myage&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myschool&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mySchool&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    声明school对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mySchool&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xu.ba03.School&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;黑大&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;学府路&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、引用类型属性自动注入"><a href="#三、引用类型属性自动注入" class="headerlink" title="三、引用类型属性自动注入"></a>三、引用类型属性自动注入</h2><p>对于引用类型属性的注入，也可不在配置文件中显示的注入。可以通过为<bean/>标签<br>设置 autowire 属性值，为引用类型属性进行隐式自动注入（默认是不自动注入引用类型属<br>性）。根据自动注入判断标准的不同，可以分为两种：  </p><ol><li>byName：根据名称自动注入  </li><li>byType： 根据类型自动注入<h3 id="3-1-byName方式自动注入"><a href="#3-1-byName方式自动注入" class="headerlink" title="3.1. byName方式自动注入"></a>3.1. byName方式自动注入</h3>当配置文件中被调用者 bean 的 id 值与代码中调用者 bean 类的属性名相同时，可使用byName 方式，让容器自动将被调用者 bean 注入给调用者 bean。容器是通过调用者的 bean类的属性名与配置文件的被调用者 bean 的 id 进行比较而实现自动注入的。  <img src="/2022/04/10/Spring%E5%9F%BA%E4%BA%8EXML%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5DI%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/1.png" class="" title="This is an image">  可以看到，Student类中的引用类型成员变量School原先是在student的bean中使用ref进行引用的，现在是通过byName的方式自动引入。  <h3 id="3-2-byType方式自动注入"><a href="#3-2-byType方式自动注入" class="headerlink" title="3.2. byType方式自动注入"></a>3.2. byType方式自动注入</h3>使用 byType 方式自动注入，要求：配置文件中被调用者 bean 的 class 属性指定的类，要与代码中调用者 bean 类的某引用类型属性类型同源。即要么相同，要么有 is-a 关系（子类，或是实现类）。但这样的同源的被调用 bean 只能有一个。多于一个，容器就不知该匹配哪一个了。<br>举例：<img src="/2022/04/10/Spring%E5%9F%BA%E4%BA%8EXML%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5DI%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/2.png" class="" title="This is an image">   <h2 id="四、为应用指定多个Spring配置文件"><a href="#四、为应用指定多个Spring配置文件" class="headerlink" title="四、为应用指定多个Spring配置文件"></a>四、为应用指定多个Spring配置文件</h2>在实际应用里，随着应用规模的增加，系统中 Bean 数量也大量增加，导致配置文件变得非常庞大、臃肿。为了避免这种情况的产生，提高配置文件的可读性与可维护性，可以将Spring 配置文件分解成多个配置文件。</li></ol><p><strong>包含关系的配置文件：</strong><br>多个配置文件中有一个总文件，总配置文件将各其它子文件通过&lt;import&#x2F;&gt;引入。在 Java代码中只需要使用总配置文件对容器进行初始化即可。<br>图例：将容纳了各个对象声明的XML文件分解为三个单独文件，在total.xml中通过引用的方式引用其他文件内对对象的声明。  </p><img src="/2022/04/10/Spring%E5%9F%BA%E4%BA%8EXML%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5DI%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/3.png" class="" title="This is an image">   <p>Spring配置文件total.xml:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    spring-total表示主配置文件，包含其他的配置文件的，主配置文件一般是不定义对象的</span><br><span class="hljs-comment">    语法：&lt;import resource =&quot;其他配置文件的路径&quot;&gt;</span><br><span class="hljs-comment">    关键字：“classpath：”表示类路径（class文件所在的目录）</span><br><span class="hljs-comment">        在spring配置文件中要指定其他文件的位置，需要使用classpath，告诉spring到哪里加载读取文件</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-comment">&lt;!--    加载的是文件列表--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;import resource=&quot;classpath:ba06/spring-school.xml&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;import resource=&quot;classpath:ba06/spring-student.xml&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    在包含关系的配置文件中，可以使用通配符（*表示任意字符）</span><br><span class="hljs-comment">        注意：住的配置文件名称不能包含在通配符的范围内</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath:ba06/spring-*.xml&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术笔记</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring框架概述</title>
    <link href="/2022/04/02/Spring%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/04/02/Spring%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h1><h2 id="一、Spring框架是什么"><a href="#一、Spring框架是什么" class="headerlink" title="一、Spring框架是什么"></a>一、Spring框架是什么</h2><p>Spring 是 2003 年兴起的一个轻量级的 Java 开发框架，为了解决企业应用开发<br>的复杂性。<strong>核心是控制反转（IoC）和面向切面编程（AOP）</strong>。</p><p>Spring 的主要作用就是为代码“解耦”，降低代码间的耦合度。就是让对象和对象（模块和模块）之间关系不是使用代码关联，而是通过配置来说明。即在 Spring 中说明对象（模块）的关系。</p><p><strong>依赖</strong>：classa中使用classb的属性或者方法， 叫做classa依赖classb</p><h2 id="二、Spring框架的优点"><a href="#二、Spring框架的优点" class="headerlink" title="二、Spring框架的优点"></a>二、Spring框架的优点</h2><p>Spring 是一个框架。由20 个模块组成。它是一个容器管理对象Spring 容器不装文本，数字。装的是对象称为bean。Spring 是存储对象的容器。</p><h3 id="1、轻量"><a href="#1、轻量" class="headerlink" title="1、轻量"></a>1、轻量</h3><p>Spring 框架使用的jar 都比较小，一般在 1M 以下或者几百 kb。Spring 核心功能的所需的 jar 总共在 3M 左右。<br>Spring 框架运行占用的资源少，运行效率高。不依赖其他 jar</p><h3 id="2、针对接口编程，解耦合"><a href="#2、针对接口编程，解耦合" class="headerlink" title="2、针对接口编程，解耦合"></a>2、针对接口编程，解耦合</h3><p>Spring 提供了 Ioc 控制反转，由容器管理对象，对象的依赖关系。原来在程序代码中的对象创建方式，现在由容器完成。对象之间的依赖解耦合。</p><p><strong>(1) 传统方法的对象创建，以service和Dao举例</strong></p><img src="/2022/04/02/Spring%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/2.png" class="" title="This is an image"><p><strong>(2) Spring程序开发步骤</strong></p><img src="/2022/04/02/Spring%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/3.png" class="" title="This is an image"><p>可以看到，spring和传统方法相比，将对象的创建方式进行了修改，原本的userDao是通过new一个UserDao的实现类(UserDaoImpl)创建的，现在通过配置xml文件，给对象制定一个id标识，spring根据id标识获得Bean全限定名，通过反射创建对象并最终返回。</p><p>后续如果想改对象的声明，可以直接修改XML的内容，而不需要在代码中来回乱翻，方便了大型项目的管理。</p><h3 id="3、AOP-面向切面-编程的支持"><a href="#3、AOP-面向切面-编程的支持" class="headerlink" title="3、AOP(面向切面)编程的支持"></a>3、AOP(面向切面)编程的支持</h3><p>通过 Spring 提供的 AOP 功能，方便进行面向切面的编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松应付</p><p>在 Spring 中，开发人员可以从繁杂的事务管理代码中解脱出来，通过声明式方式灵活地进行事务的管理，提高开发效率和质量。</p><h3 id="4、方便集成各种优秀框架"><a href="#4、方便集成各种优秀框架" class="headerlink" title="4、方便集成各种优秀框架"></a>4、方便集成各种优秀框架</h3><p>Spring提供了对各种优秀框架（如 Struts,Hibernate、MyBatis）的直接支持。简化框架的使用。</p><h2 id="三、Spring的体系结构"><a href="#三、Spring的体系结构" class="headerlink" title="三、Spring的体系结构"></a>三、Spring的体系结构</h2><img src="/2022/04/02/Spring%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/1.png" class="" title="This is an image"><p>Spring 由 20 多个模块组成，它们可以分为数据访问&#x2F;集成（Data Access&#x2F;Integration）、Web、面向切面编程（AOP, Aspects）、提供JVM的代理（Instrumentation）、消息发送（Messaging）、核心容器（Core Container）和测试（Test）</p>]]></content>
    
    
    <categories>
      
      <category>Spring笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术笔记</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Web开发中MVC设计模式简介以及DAO层、Service层和Controller层的区别</title>
    <link href="/2022/03/24/Java-Web%E5%BC%80%E5%8F%91%E4%B8%ADMVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8ADAO%E5%B1%82%E3%80%81Service%E5%B1%82%E5%92%8CController%E5%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/03/24/Java-Web%E5%BC%80%E5%8F%91%E4%B8%ADMVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8ADAO%E5%B1%82%E3%80%81Service%E5%B1%82%E5%92%8CController%E5%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-Web开发中MVC设计模式简介以及DAO层、Service层和Controller层的区别"><a href="#Java-Web开发中MVC设计模式简介以及DAO层、Service层和Controller层的区别" class="headerlink" title="Java Web开发中MVC设计模式简介以及DAO层、Service层和Controller层的区别"></a>Java Web开发中MVC设计模式简介以及DAO层、Service层和Controller层的区别</h1><h2 id="一、有关MVC设计模式"><a href="#一、有关MVC设计模式" class="headerlink" title="一、有关MVC设计模式"></a>一、有关MVC设计模式</h2><p>目前主流在Java Web应用中应用的最广泛的设计模式便是MVC模式，目前的主流Web框架大多也是基于MVC设计模式所编写的。</p><p>所谓MVC，即Model-View-Controller。</p><ol><li><p>Model层：Model指模型部分，一般在应用中Model层包括业务处理层和数据访问层。数据访问层主要是对数据库的一些操作的封装。业务处理层应用JavaBean构建， JavaBean主要是用作将从View层获取的数据和数据库的数据进行桥接。除却JavaBean以外，若想构建分布式应用系统，可以应用EJB组件进行业务逻辑层的构建。</p></li><li><p>Controller层：Controller指控制部分，一般是对View层提交的请求为其设置对应的Servlet进行特定功能的处理，这里的进行特定功能的处理一般是编写在Model中的业务处理层中的。Controller一般只是在Web应用中充当一个中介者的作用。</p></li><li><p>View层：View指视图部分，这一部分的内容是展示给用户实际进行交互的，通常使用JSP和HTML进行构建（个人比较喜欢以HTML嵌入JSP的方式来构建网页）。</p></li></ol><p>综上来说，一个小型完整的基于MVC设计模式的Web应用程序的处理流程应该如下：</p><img src="/2022/03/24/Java-Web%E5%BC%80%E5%8F%91%E4%B8%ADMVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8ADAO%E5%B1%82%E3%80%81Service%E5%B1%82%E5%92%8CController%E5%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB/1.png" class="" title="This is an image"><p>  <strong>由上面的图中我们可以看出，用户在客户端（Web应用的客户端即为浏览器）中发出请求的时候，请求首先由View层的JSP&#x2F;HTML将HTTP请求传给Controller层对应的Servlet，然后由Servlet负责调用Model层中的业务逻辑处理部分(service)进行要求的处理，处理期间如果设计数据库的操作，则与数据库进行操作(DAO)，最后全部操作结束之后，由业务逻辑层将结果发给控制层，控制层以HTTP响应的形式将结果发送回客户端。</strong></p><h2 id="二、代码编写中MVC三层的内容"><a href="#二、代码编写中MVC三层的内容" class="headerlink" title="二、代码编写中MVC三层的内容"></a>二、代码编写中MVC三层的内容</h2><h3 id="1-View层的编写"><a href="#1-View层的编写" class="headerlink" title="(1) View层的编写"></a>(1) View层的编写</h3><p>View层主要是由jsp、HTML编写而成。</p><h3 id="2-Controller层的编写"><a href="#2-Controller层的编写" class="headerlink" title="(2) Controller层的编写"></a>(2) Controller层的编写</h3><p>Controller层主要编写接受View层请求的Servlet</p><h3 id="3-Model层的编写"><a href="#3-Model层的编写" class="headerlink" title="(3) Model层的编写"></a>(3) Model层的编写</h3><p>Model层在具体的编写中包括dao层和bean层还有service层。</p><p><strong>1. bean层：bean层中编写数据模型类，示例代码如下</strong></p><figure class="highlight plaintext"><figcaption><span>class UserBean &#123;</span></figcaption><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs public">    private String userName;<br>    private String passWord;<br>    private String answer;<br>    public void set_userName(String userName) &#123;<br>        this.userName = userName;<br>    &#125;<br>    public void set_passWord(String passWord) &#123;<br>        this.passWord = passWord;<br>    &#125;<br>    public void set_answer(String answer) &#123;<br>        this.answer = answer;<br>    &#125;<br>    public String get_userName() &#123;<br>        return userName;<br>    &#125;<br>    public String get_passWord() &#123;<br>        return passWord;<br>    &#125;<br>    public String get_answer() &#123;<br>        return answer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>2. DAO层负责与数据库进行交互。</strong></p><p><strong>3. service层：service层负责编写具体的业务逻辑，对于大型项目来说，业务逻辑层一般需要进行很多的业务处理</strong></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><ul><li><p><strong>DAO层</strong>：DAO层叫数据访问层，全称为data access object，属于一种比较底层，比较基础的操作，具体到对于某个表的增删改查，也就是说某个DAO一定是和数据库的某一张表一一对应的，其中封装了增删改查基本操作，建议DAO只做原子操作，增删改查。</p></li><li><p><strong>Service层</strong>：Service层叫服务层，被称为服务，粗略的理解就是对一个或多个DAO进行的再次封装，封装成一个服务，所以这里也就不会是一个原子操作了，需要事物控制。</p></li><li><p><strong>Controler层</strong>：Controler负责请求转发，接受页面过来的参数，传给Service处理，接到返回值，再传给页面。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb 笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
      <tag>技术笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows10如何彻底卸载Mysql8.0</title>
    <link href="/2022/03/22/Windows10%E5%A6%82%E4%BD%95%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDMysql8-0/"/>
    <url>/2022/03/22/Windows10%E5%A6%82%E4%BD%95%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDMysql8-0/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows10如何彻底卸载Mysql8-0"><a href="#Windows10如何彻底卸载Mysql8-0" class="headerlink" title="Windows10如何彻底卸载Mysql8.0"></a>Windows10如何彻底卸载Mysql8.0</h1><blockquote><p>最近在做小项目的时候遇到了Mysql和jar包版本不兼容的问题，于是打算安装一个低版本的MySQL，但是在同一台计算机上只能存在一个版本的MySQL，于是乎需要卸载MySQL8，本篇文章记录卸载的方式</p></blockquote><h2 id="1-停止MySQL的服务"><a href="#1-停止MySQL的服务" class="headerlink" title="1.停止MySQL的服务"></a>1.停止MySQL的服务</h2><p>启动任务管理器—&gt;选择服务—-&gt;找到MySQL—-&gt;右键停止</p><img src="/2022/03/22/Windows10%E5%A6%82%E4%BD%95%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDMysql8-0/1.png" class="" title="This is an image"><p>或者</p><p>打开运行，输入services.msc，找到MySQL，右键停止。</p><img src="/2022/03/22/Windows10%E5%A6%82%E4%BD%95%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDMysql8-0/2.png" class="" title="This is an image"><p>如果有多个MySQL服务，也全部都要停掉</p><h2 id="2-卸载MySQL相关的所有软件"><a href="#2-卸载MySQL相关的所有软件" class="headerlink" title="2.卸载MySQL相关的所有软件"></a>2.卸载MySQL相关的所有软件</h2><p>打开看控制面板—-&gt;卸载程序—-&gt;卸载与MySQL相关的所有组件</p><img src="/2022/03/22/Windows10%E5%A6%82%E4%BD%95%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDMysql8-0/3.png" class="" title="This is an image"><h2 id="3-删除MySQL安装目录下的MySQL文件夹"><a href="#3-删除MySQL安装目录下的MySQL文件夹" class="headerlink" title="3.删除MySQL安装目录下的MySQL文件夹"></a>3.删除MySQL安装目录下的MySQL文件夹</h2><p>如果在其他文件夹下也发现MySQL文件，也将其删除，比如<strong>C:\Program Files</strong>等目录，以及一些隐藏目录，比如programData文件夹，遇到开启查看隐藏文件的选项才能看到</p><img src="/2022/03/22/Windows10%E5%A6%82%E4%BD%95%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDMysql8-0/4.png" class="" title="This is an image"><h2 id="4-打开注册表编辑器，删除注册表"><a href="#4-打开注册表编辑器，删除注册表" class="headerlink" title="4.打开注册表编辑器，删除注册表"></a>4.打开注册表编辑器，删除注册表</h2><p>win + R快捷键，输入regedi，回车，打开注册表编辑器<br>删除注册表相关文件</p><p>删除 </p><ul><li><p>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL 文件夹</p></li><li><p>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL 文件夹。</p></li><li><p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL文件夹。</p></li></ul><h2 id="5-额外工作"><a href="#5-额外工作" class="headerlink" title="5.额外工作"></a>5.额外工作</h2><p>一般完成以上工作之后就可以成功卸载mysql了，如果此时直接安装其他版本的mysql也可能出现报错的问题，此时我们需要重启电脑，一般就能解决问题了。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术笔记</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Hexo文章内图片无法显示的问题</title>
    <link href="/2022/03/20/%E8%A7%A3%E5%86%B3Hexo%E6%96%87%E7%AB%A0%E5%86%85%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/20/%E8%A7%A3%E5%86%B3Hexo%E6%96%87%E7%AB%A0%E5%86%85%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="解决Hexo文章内图片无法显示的问题"><a href="#解决Hexo文章内图片无法显示的问题" class="headerlink" title="解决Hexo文章内图片无法显示的问题"></a>解决Hexo文章内图片无法显示的问题</h1><p>问题描述：按照网上的教程一步一步配置好Hexo后，发现自己使用markdown语法引入的图片无法在自己的博客页面浏览，打开F12对HTML代码进行查看的时候发现是路径问题。</p><h2 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h2><p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为true后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章就可以使用相对路径引用图片资源了。</p><p><strong><img src="/2022/03/20/%E8%A7%A3%E5%86%B3Hexo%E6%96%87%E7%AB%A0%E5%86%85%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/1.png" class=""></strong></p><p>将此目录结构上传到github会发现，原本不和文章.md在同一文件下的图片，在github中竟然跑到一个文件夹去了</p><p><strong><img src="/2022/03/20/%E8%A7%A3%E5%86%B3Hexo%E6%96%87%E7%AB%A0%E5%86%85%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/2.png" class=""></strong></p><p>这就导致我们用markdown语法引入图片的时候所写的路径和html中引用的路径不一样，若现在还尝试使用markdown语法，那需要以github仓库中的路径为准，比如将<strong>“ 图片文件夹&#x2F;1.jpg ”改为“ 1.jpg ”</strong></p><p><strong>上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。</strong></p><p>下面来介绍方式2</p><h2 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h2><p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p><p><code>&#123;% asset_img image.jpg This is an image %&#125;</code></p><p>这里的image.jpg需要按需修改成和文章同名文件夹内的真正图片名称，而不是路径名称， 请注意区分。</p><h2 id="方式3"><a href="#方式3" class="headerlink" title="方式3"></a>方式3</h2><p>这个方式我没有自己试过，现整理如下</p><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>当Hexo项目中只用到少量图片时，可以将图片统一放在<code>source/images</code>文件夹中，通过markdown语法访问它们。</p><figure class="highlight arcade"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs arcade">![](<span class="hljs-regexp">/images/im</span>age.jpg)<br></code></pre></td></tr></table></figure><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术笔记</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在vscode中设置用ctrl+鼠标滚轮缩放字体</title>
    <link href="/2022/03/20/%E5%9C%A8vscode%E4%B8%AD%E8%AE%BE%E7%BD%AE%E7%94%A8ctrl-%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E7%BC%A9%E6%94%BE%E5%AD%97%E4%BD%93/"/>
    <url>/2022/03/20/%E5%9C%A8vscode%E4%B8%AD%E8%AE%BE%E7%BD%AE%E7%94%A8ctrl-%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E7%BC%A9%E6%94%BE%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h1 id="在vscode中设置用ctrl-鼠标滚轮缩放字体"><a href="#在vscode中设置用ctrl-鼠标滚轮缩放字体" class="headerlink" title="在vscode中设置用ctrl+鼠标滚轮缩放字体"></a>在vscode中设置用ctrl+鼠标滚轮缩放字体</h1><h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><p>点击【文件】【首选项】【设置】</p><h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><p>在上方搜索栏搜索关键字setting打开设置配置文件</p><img src="/2022/03/20/%E5%9C%A8vscode%E4%B8%AD%E8%AE%BE%E7%BD%AE%E7%94%A8ctrl-%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E7%BC%A9%E6%94%BE%E5%AD%97%E4%BD%93/%E6%88%AA%E5%9B%BE1.png" class="" title="This is an example image"><h2 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h2><p>在setting.json中加入一行语句：</p><figure class="highlight json"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;editor.mouseWheelZoom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><img src="/2022/03/20/%E5%9C%A8vscode%E4%B8%AD%E8%AE%BE%E7%BD%AE%E7%94%A8ctrl-%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E7%BC%A9%E6%94%BE%E5%AD%97%E4%BD%93/2.png" class="" title="This is an example image"><p>接着就可以用ctrl+滚轮调整编辑区字体大小了</p>]]></content>
    
    
    <categories>
      
      <category>vsCode 笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术笔记</tag>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
